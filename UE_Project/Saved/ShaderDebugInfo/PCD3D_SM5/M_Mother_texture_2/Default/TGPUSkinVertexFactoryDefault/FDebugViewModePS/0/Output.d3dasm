//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Note: shader requires additional functionality:
//       Early depth-stencil
//
//
// Buffer Definitions: 
//
// cbuffer $Globals
// {
//
//   float4 OneOverCPUTexCoordScales[64];// Offset:    0 Size:  1024
//   int4 TexCoordIndices[64];          // Offset: 1024 Size:  1024
//   float4 CPUTexelFactor;             // Offset: 2048 Size:    16
//   float4 NormalizedComplexity;       // Offset: 2064 Size:    16
//   int2 AnalysisParams;               // Offset: 2080 Size:     8
//   float PrimitiveAlpha;              // Offset: 2088 Size:     4
//   int TexCoordAnalysisIndex;         // Offset: 2092 Size:     4
//   float CPULogDistance;              // Offset: 2096 Size:     4
//   uint bShowQuadOverdraw;            // Offset: 2100 Size:     4
//   uint bOutputQuadOverdraw;          // Offset: 2104 Size:     4
//   int LODIndex;                      // Offset: 2108 Size:     4
//   float3 SkinCacheDebugColor;        // Offset: 2112 Size:    12
//   int VisualizeMode;                 // Offset: 2124 Size:     4
//
// }
//
// cbuffer View
// {
//
//   row_major float4x4 View_View_SVPositionToTranslatedWorld;// Offset:  768 Size:    64
//   float View_View_MaterialTextureMipBias;// Offset: 2304 Size:     4
//
// }
//
// cbuffer DebugViewModePass
// {
//
//   float4 DebugViewModePass_DebugViewModePass_DebugViewMode_AccuracyColors[5];// Offset:  112 Size:    80
//   float4 DebugViewModePass_DebugViewModePass_DebugViewMode_LODColors[8];// Offset:  192 Size:   128
//
// }
//
// cbuffer Material
// {
//
//   float4 Material_Material_PreshaderBuffer[2];// Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Material_Texture2D_0Sampler       sampler      NA          NA             s0      1 
// Material_Texture2D_0              texture  float4          2d             t0      1 
// DebugViewModePass_QuadOverdraw        UAV    uint          2d             u1      1 
// $Globals                          cbuffer      NA          NA            cb0      1 
// View                              cbuffer      NA          NA            cb1      1 
// DebugViewModePass                 cbuffer      NA          NA            cb2      1 
// Material                          cbuffer      NA          NA            cb3      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 1   xyzw        0     NONE   float   xyzw
// TEXCOORD                 2   xyzw        1     NONE   float   xyzw
// SV_PrimitiveID           0   x           2   PRIMID    uint   x   
// SV_Position              0   xyzw        3      POS   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | forceEarlyDepthStencil
dcl_constantbuffer CB0[133], immediateIndexed
dcl_constantbuffer CB1[145], immediateIndexed
dcl_constantbuffer CB2[20], dynamicIndexed
dcl_constantbuffer CB3[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_uav_typed_texture2d (uint,uint,uint,uint) u1
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyzw
dcl_input_ps_sgv constant v2.x, primitive_id
dcl_input_ps_siv linear noperspective v3.xyz, position
dcl_output o0.xyzw
dcl_temps 8
ieq r0.xyzw, cb0[132].wwww, l(1, 2, 3, 4)
or r0.x, r0.y, r0.x
or r0.x, r0.z, r0.x
or r0.x, r0.w, r0.x
if_nz r0.x
  if_nz cb0[131].z
    ine r0.x, cb0[131].y, l(0)
    lt r0.y, l(0.000000), cb0[129].x
    and r0.x, r0.y, r0.x
    if_nz r0.x
      ftou r0.xyzw, v3.xyyy
      ushr r0.xyzw, r0.xyzw, l(1, 1, 1, 1)
      ishl r1.x, v2.x, l(2)
      iadd r1.x, r1.x, l(4)
      mov r1.yzw, l(0,3,0,0)
      loop 
        ige r2.x, r1.w, l(24)
        breakc_nz r2.x
        ieq r2.x, r1.z, l(1)
        if_nz r2.x
          ld_uav_typed_indexable(texture2d)(uint,uint,uint,uint) r2.x, r0.xwww, u1.xyzw
          ushr r2.y, r2.x, l(2)
          iadd r2.y, r2.y, l(-1)
          ine r2.y, r2.y, v2.x
          and r2.x, r2.x, l(3)
          movc r1.y, r2.y, r1.y, r2.x
          movc r1.z, r2.y, l(-1), l(1)
        endif 
        ieq r2.x, r1.z, l(2)
        if_nz r2.x
          ld_uav_typed_indexable(texture2d)(uint,uint,uint,uint) r2.x, r0.xwww, u1.xyzw
          and r2.x, r2.x, l(3)
          ieq r2.y, r1.y, r2.x
          if_nz r2.y
            store_uav_typed u1.xyzw, r0.xwww, l(0,0,0,0)
          endif 
          movc r1.z, r2.y, l(-1), l(2)
          mov r1.y, r2.x
        endif 
        if_z r1.z
          imm_atomic_cmp_exch r2.x, u1, r0.xwxx, l(0), r1.x
          ushr r2.y, r2.x, l(2)
          iadd r2.y, r2.y, l(-1)
          ieq r2.y, r2.y, v2.x
          if_nz r2.y
            atomic_iadd u1, r0.xwxx, l(1)
          endif 
          movc r2.x, r2.x, l(0), l(2)
          movc r1.z, r2.y, l(1), r2.x
        endif 
        iadd r1.w, r1.w, l(1)
      endloop 
      ieq r1.x, r1.z, l(2)
      if_nz r1.x
        store_uav_typed u1.xyzw, r0.xyzw, l(0,0,0,0)
      endif 
      iadd r0.x, r1.y, l(1)
      utof r0.x, r0.x
      div r0.x, l(4.000000), r0.x
      mul r0.x, r0.x, cb0[129].x
    else 
      mov r0.x, cb0[129].x
    endif 
  else 
    mov r0.x, cb0[129].x
  endif 
  mov r0.yz, cb0[129].yyzy
  mov r0.w, l(1.000000)
  mov o0.xyzw, r0.xyzw
else 
  ieq r0.x, cb0[132].w, l(5)
  if_nz r0.x
    ge r0.x, cb0[131].x, l(0.000000)
    if_nz r0.x
      mul r0.xyzw, v3.yyyy, cb1[49].xyzw
      mad r0.xyzw, v3.xxxx, cb1[48].xyzw, r0.xyzw
      mad r0.xyzw, v3.zzzz, cb1[50].xyzw, r0.xyzw
      add r0.xyzw, r0.xyzw, cb1[51].xyzw
      div r0.xyz, r0.xyzx, r0.wwww
      dp3 r0.x, r0.xyzx, r0.xyzx
      sqrt r0.x, r0.x
      max r0.x, r0.x, l(1.000000)
      log r0.x, r0.x
      add r0.x, r0.x, -cb0[131].x
      max r0.x, r0.x, l(-1.990000)
      min r0.x, r0.x, l(1.990000)
      round_ni r0.y, r0.x
      add r0.y, r0.y, l(2.000000)
      ftoi r0.y, r0.y
      frc r0.x, r0.x
      add r1.xyz, -cb2[r0.y + 7].xyzx, cb2[r0.y + 8].xyzx
      mad r0.xyz, r0.xxxx, r1.xyzx, cb2[r0.y + 7].xyzx
    else 
      mov r0.xyz, l(0.015000,0.015000,0.015000,0)
    endif 
    mov r0.w, cb0[130].z
    mov o0.xyzw, r0.xyzw
  else 
    ieq r0.x, cb0[132].w, l(6)
    if_nz r0.x
      ige r0.x, cb0[130].w, l(0)
      if_nz r0.x
        ieq r0.xy, cb0[130].wwww, l(1, 2, 0, 0)
        movc r0.z, r0.y, cb0[128].z, cb0[128].w
        movc r0.z, r0.x, cb0[128].y, r0.z
        movc r0.z, cb0[130].w, r0.z, cb0[128].x
        lt r0.w, l(0.000000), r0.z
        if_nz r0.w
          mul r1.xyzw, v3.yyyy, cb1[49].xyzw
          mad r1.xyzw, v3.xxxx, cb1[48].xyzw, r1.xyzw
          mad r1.xyzw, v3.zzzz, cb1[50].xyzw, r1.xyzw
          add r1.xyzw, r1.xyzw, cb1[51].xyzw
          div r1.xyz, r1.yzxy, r1.wwww
          movc r0.yw, r0.yyyy, v1.yyyx, v1.wwwz
          movc r0.xy, r0.xxxx, v0.wzww, r0.ywyy
          movc r0.xy, cb0[130].wwww, r0.xyxx, v0.yxyy
          deriv_rtx_fine r2.xy, r0.yxyy
          deriv_rty_fine r0.xy, r0.xyxx
          log r0.z, r0.z
          deriv_rtx_fine r3.xyz, r1.yzxy
          deriv_rty_fine r1.xyz, r1.xyzx
          mul r4.xyz, r1.xyzx, r3.xyzx
          mad r1.xyz, r3.zxyz, r1.yzxy, -r4.xyzx
          dp3 r0.w, r1.xyzx, r1.xyzx
          sqrt r0.w, r0.w
          mul r0.y, r0.y, r2.y
          mad r0.x, r2.x, r0.x, -r0.y
          max r0.x, |r0.x|, l(0.000000)
          div r0.x, r0.w, r0.x
          sqrt r0.x, r0.x
          log r0.x, r0.x
          add r0.x, -r0.x, r0.z
          max r0.x, r0.x, l(-1.990000)
          min r0.x, r0.x, l(1.990000)
          round_ni r0.y, r0.x
          add r0.y, r0.y, l(2.000000)
          ftoi r0.y, r0.y
          frc r0.x, r0.x
          add r1.xyz, -cb2[r0.y + 7].xyzx, cb2[r0.y + 8].xyzx
          mad r0.xyz, r0.xxxx, r1.xyzx, cb2[r0.y + 7].xyzx
        else 
          mov r0.xyz, l(0.015000,0.015000,0.015000,0)
        endif 
      else 
        lt r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000), cb0[128].xyzw
        mul r2.xyzw, v3.yyyy, cb1[49].xyzw
        mad r2.xyzw, v3.xxxx, cb1[48].xyzw, r2.xyzw
        mad r2.xyzw, v3.zzzz, cb1[50].xyzw, r2.xyzw
        add r2.xyzw, r2.xyzw, cb1[51].xyzw
        div r2.xyz, r2.yzxy, r2.wwww
        deriv_rtx_fine r3.xyzw, v0.xyzw
        deriv_rty_fine r4.xyzw, v0.yxwz
        log r5.xyzw, cb0[128].xyzw
        deriv_rtx_fine r6.xyz, r2.yzxy
        deriv_rty_fine r2.xyz, r2.xyzx
        mul r7.xyz, r2.xyzx, r6.xyzx
        mad r2.xyz, r6.zxyz, r2.yzxy, -r7.xyzx
        dp3 r2.x, r2.xyzx, r2.xyzx
        sqrt r2.x, r2.x
        mul r2.yz, r3.yywy, r4.yywy
        mad r2.yz, r3.xxzx, r4.xxzx, -r2.yyzy
        max r2.yz, |r2.yyzy|, l(0.000000, 0.000000, 0.000000, 0.000000)
        div r2.yz, r2.xxxx, r2.yyzy
        sqrt r2.yz, r2.yyzy
        log r2.yz, r2.yyzy
        add r2.yz, -r2.yyzy, r5.xxyx
        max r2.yz, r2.yyzy, l(0.000000, -1.990000, -1.990000, 0.000000)
        min r2.yz, r2.yyzy, l(0.000000, 1.990000, 1.990000, 0.000000)
        movc r2.yw, r1.xxxx, r2.yyyy, l(0,-1024.000000,0,1024.000000)
        max r3.x, r2.y, r2.z
        min r3.y, r2.w, r2.z
        movc r1.xy, r1.yyyy, r3.xyxx, r2.ywyy
        deriv_rtx_fine r3.xyzw, v1.xyzw
        deriv_rty_fine r4.xyzw, v1.yxwz
        mul r2.yz, r3.yywy, r4.yywy
        mad r2.yz, r3.xxzx, r4.xxzx, -r2.yyzy
        max r2.yz, |r2.yyzy|, l(0.000000, 0.000000, 0.000000, 0.000000)
        div r2.xy, r2.xxxx, r2.yzyy
        sqrt r2.xy, r2.xyxx
        log r2.xy, r2.xyxx
        add r2.xy, -r2.xyxx, r5.zwzz
        max r2.xy, r2.xyxx, l(-1.990000, -1.990000, 0.000000, 0.000000)
        min r2.xy, r2.xyxx, l(1.990000, 1.990000, 0.000000, 0.000000)
        max r3.x, r1.x, r2.x
        min r3.y, r1.y, r2.x
        movc r1.xy, r1.zzzz, r3.xyxx, r1.xyxx
        max r3.x, r1.x, r2.y
        min r3.y, r1.y, r2.y
        movc r1.xy, r1.wwww, r3.xyxx, r1.xyxx
        ftoi r1.zw, v3.xxxy
        and r1.zw, r1.zzzw, l(0, 0, 8, 8)
        ieq r1.z, r1.w, r1.z
        movc r1.x, r1.z, r1.y, r1.x
        ne r1.y, |r1.x|, l(1024.000000)
        if_nz r1.y
          round_ni r1.y, r1.x
          add r1.y, r1.y, l(2.000000)
          ftoi r1.y, r1.y
          iadd r1.z, r1.y, l(1)
          frc r1.x, r1.x
          add r2.xyz, -cb2[r1.y + 7].xyzx, cb2[r1.z + 7].xyzx
          mad r0.xyz, r1.xxxx, r2.xyzx, cb2[r1.y + 7].xyzx
        else 
          mov r0.xyz, l(0.015000,0.015000,0.015000,0)
        endif 
      endif 
      mov r0.w, cb0[130].z
      mov o0.xyzw, r0.xyzw
    else 
      ieq r0.xy, cb0[132].wwww, l(7, 8, 0, 0)
      or r0.x, r0.y, r0.x
      if_nz r0.x
        ftoi r0.xy, v3.xyxx
        deriv_rtx_coarse r1.xyzw, v0.xyzw
        deriv_rtx_coarse r2.xyzw, v1.xyzw
        dp2 r0.z, r1.xyxx, r1.xyxx
        dp2 r0.w, r1.zwzz, r1.zwzz
        sqrt r0.zw, r0.zzzw
        dp2 r1.x, r2.xyxx, r2.xyxx
        dp2 r1.y, r2.zwzz, r2.zwzz
        sqrt r1.xy, r1.xyxx
        div r0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
        div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
        div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
        div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
        deriv_rty_coarse r2.xyzw, v0.xyzw
        deriv_rty_coarse r3.xyzw, v1.xyzw
        dp2 r1.z, r2.xyxx, r2.xyxx
        dp2 r1.w, r2.zwzz, r2.zwzz
        sqrt r1.zw, r1.zzzw
        dp2 r2.x, r3.xyxx, r3.xyxx
        dp2 r2.y, r3.zwzz, r3.zwzz
        sqrt r2.xy, r2.xyxx
        div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r1.z
        div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
        div r2.x, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
        div r2.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
        xor r2.z, r0.y, l(32)
        imax r2.w, r0.y, -r0.y
        ushr r2.w, r2.w, l(5)
        ineg r3.x, r2.w
        and r2.z, r2.z, l(0x80000000)
        movc r2.z, r2.z, r3.x, r2.w
        xor r2.w, r2.z, l(4)
        imax r3.x, r2.z, -r2.z
        ushr r3.x, r3.x, l(2)
        ineg r3.y, r3.x
        and r2.w, r2.w, l(0x80000000)
        movc r2.w, r2.w, r3.y, r3.x
        imad r2.z, l(-4), r2.w, r2.z
        movc r2.zw, r2.zzzz, l(0,0,0,0), v0.xxxy
        movc r2.zw, cb0[130].yyyy, r2.zzzw, v0.xxxy
        deriv_rtx_coarse r3.xy, r2.zwzz
        deriv_rty_coarse r3.zw, r2.zzzw
        ieq r4.xy, cb0[64].xxxx, l(1, 2, 0, 0)
        movc r1.x, r4.y, r1.x, r1.y
        movc r0.w, r4.x, r0.w, r1.x
        movc r0.z, cb0[64].x, r0.w, r0.z
        movc r0.w, r4.y, r2.x, r2.y
        movc r0.w, r4.x, r1.w, r0.w
        movc r0.w, cb0[64].x, r0.w, r1.z
        dp2 r1.x, r3.xyxx, r3.xyxx
        sqrt r1.x, r1.x
        mul r0.z, r0.z, r1.x
        dp2 r1.x, r3.zwzz, r3.zwzz
        sqrt r1.x, r1.x
        mul r0.w, r0.w, r1.x
        min r0.z, r0.w, r0.z
        if_nz cb0[130].y
          ine r0.w, cb0[130].y, l(0)
          xor r1.x, r0.x, l(32)
          imax r1.y, r0.x, -r0.x
          ushr r1.y, r1.y, l(5)
          ineg r1.z, r1.y
          and r1.x, r1.x, l(0x80000000)
          movc r1.x, r1.x, r1.z, r1.y
          ieq r1.x, r1.x, l(0)
          and r0.w, r0.w, r1.x
          min r1.x, r0.z, l(256.000000)
          movc o0.x, r0.w, r1.x, l(256.000000)
          mov o0.yzw, l(0,256.000000,256.000000,256.000000)
        else 
          ieq r1.xy, cb0[130].xxxx, l(-1, 0, 0, 0)
          lt r0.w, l(0.000000), cb0[0].x
          or r1.y, r1.y, r1.x
          and r0.w, r0.w, r1.y
          mul r0.z, r0.z, cb0[0].x
          min r1.y, r0.z, l(256.000000)
          movc r1.y, r0.w, r1.y, l(256.000000)
          sample_b_indexable(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t0.xyzw, s0, cb1[144].x
          dp3_sat r1.z, r2.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
          ne r1.w, r1.y, l(256.000000)
          if_nz r1.w
            mad r1.w, r1.z, l(0.600000), l(0.400000)
            movc r2.x, cb0[130].x, l(1.000000), r1.w
            and r0.xy, r0.xyxx, l(8, 8, 0, 0)
            ieq r0.x, r0.y, r0.x
            ine r0.y, cb0[130].x, l(-1)
            or r0.x, r0.y, r0.x
            max r0.y, r0.z, l(0.000000)
            and r0.y, r0.y, r0.w
            movc r0.x, r0.x, r1.y, r0.y
            log r0.x, r0.x
            max r0.x, r0.x, l(-1.990000)
            min r0.x, r0.x, l(1.990000)
            round_ni r0.y, r0.x
            add r0.y, r0.y, l(2.000000)
            ftoi r0.y, r0.y
            frc r0.x, r0.x
            add r2.yzw, -cb2[r0.y + 7].xxyz, cb2[r0.y + 8].xxyz
            mad r0.xyz, r0.xxxx, r2.yzwy, cb2[r0.y + 7].xyzx
            movc r0.w, r1.x, r1.w, r2.x
            mul r0.xyz, r0.wwww, r0.xyzx
          else 
            mul r0.xyz, r1.zzzz, l(0.015000, 0.015000, 0.015000, 0.000000)
          endif 
          mov r0.w, cb0[130].z
          mov o0.xyzw, r0.xyzw
        endif 
      else 
        ieq r0.xy, cb0[132].wwww, l(9, 10, 0, 0)
        or r0.y, r0.y, r0.x
        if_nz r0.y
          sample_b_indexable(texture2d)(float,float,float,float) r0.yzw, v0.xyxx, t0.wxyz, s0, cb1[144].x
          dp3_sat r0.y, r0.yzwy, l(0.300000, 0.590000, 0.110000, 0.000000)
          mul r1.xyz, r0.yyyy, l(0.015000, 0.015000, 0.015000, 0.000000)
          if_nz r0.x
            deriv_rtx_fine r0.xz, v0.xxyx
            deriv_rty_fine r2.xy, v0.xyxx
            dp2 r0.x, r0.xzxx, r0.xzxx
            dp2 r0.z, r2.xyxx, r2.xyxx
            sqrt r0.xz, r0.xxzx
            min r0.x, r0.z, r0.x
            max r0.x, r0.x, l(0.000000)
            div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
            movc r0.x, cb0[130].x, l(0), r0.x
            lt r0.z, l(0.000000), r0.x
            if_nz r0.z
              mad r0.y, r0.y, l(0.600000), l(0.400000)
              movc r0.y, cb0[130].x, l(0), r0.y
              itof r0.z, cb0[130].y
              div r0.x, r0.z, r0.x
              log r0.x, r0.x
              max r0.x, r0.x, l(-1.990000)
              min r0.x, r0.x, l(1.990000)
              round_ni r0.z, r0.x
              add r0.z, r0.z, l(2.000000)
              ftoi r0.z, r0.z
              frc r0.x, r0.x
              add r2.xyz, -cb2[r0.z + 7].xyzx, cb2[r0.z + 8].xyzx
              mad r0.xzw, r0.xxxx, r2.xxyz, cb2[r0.z + 7].xxyz
              mul r1.xyz, r0.yyyy, r0.xzwx
            else 
              mov r1.xyz, r1.zzzz
            endif 
          endif 
          mov r1.w, cb0[130].z
          mov o0.xyzw, r1.xyzw
        else 
          ieq r0.x, cb0[132].w, l(12)
          if_nz r0.x
            sample_b_indexable(texture2d)(float,float,float,float) r0.xyz, v0.xyxx, t0.xyzw, s0, cb1[144].x
            mad r0.xyz, cb3[1].xxxx, cb3[1].yzwy, r0.xyzx
            dp3 r0.x, r0.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
            mad r0.x, r0.x, l(0.950000), l(0.050000)
            mov r0.y, cb0[131].w
            mul r0.xyz, r0.xxxx, cb2[r0.y + 12].xyzx
          else 
            ieq r0.w, cb0[132].w, l(13)
            if_nz r0.w
              sample_b_indexable(texture2d)(float,float,float,float) r1.xyz, v0.xyxx, t0.xyzw, s0, cb1[144].x
              mad r1.xyz, cb3[1].xxxx, cb3[1].yzwy, r1.xyzx
              dp3 r0.w, r1.xyzx, l(0.300000, 0.590000, 0.110000, 0.000000)
              mad r0.w, r0.w, l(0.950000), l(0.050000)
              mul r0.xyz, r0.wwww, cb0[132].xyzx
            else 
              mov r0.xyz, l(1.000000,0,1.000000,0)
            endif 
          endif 
          mov o0.xyz, r0.xyzx
          mov o0.w, l(1.000000)
        endif 
      endif 
    endif 
  endif 
endif 
ret 
// Approximately 387 instruction slots used
